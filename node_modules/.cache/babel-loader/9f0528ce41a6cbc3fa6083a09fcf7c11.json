{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\cv-react\\\\src\\\\page\\\\About\\\\Skills.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./Skills.scss\";\nimport { DummyData } from \"./DummyData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst skillData = DummyData;\nconst renderOrder = skillData.reverse();\n\nconst Skills = () => {\n  _s();\n\n  const initialScrollPoints = new Array(skillData.length).fill(false);\n  const [scrollPoints, setScrollPoints] = useState(initialScrollPoints);\n  useEffect(() => {\n    const skillSection = document.getElementById(\"skills\");\n    const sectionTop = skillSection ? skillSection.offsetTop * 1.3 : null;\n    const sectionHeight = skillSection ? skillSection.clientHeight : null;\n    const scrollBreakPoint = sectionHeight ? sectionHeight / skillData.length : null;\n    const scrollStartModifyer = 0.6 * sectionTop;\n    const scrollAmountModifyer = 0.8 * scrollBreakPoint;\n    window.addEventListener(\"scroll\", () => {\n      const updatedScrollPoints = scrollPoints.map((scrollPoint, index) => {\n        if (window.scrollY > scrollStartModifyer + scrollAmountModifyer * (index + 1)) {\n          return !scrollPoint;\n        }\n\n        return scrollPoint;\n      });\n      setScrollPoints(updatedScrollPoints);\n    });\n  }, []);\n  const conditionHolder = [];\n  scrollPoints.forEach(breakPoint => {\n    conditionHolder.push(breakPoint ? \"slide-out\" : \"\");\n  });\n  const triggerPoint = conditionHolder.reverse();\n  const skillList = renderOrder.map((skill, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      width: \"10em\",\n      height: \"10em\",\n      borderRadius: \"15%\",\n      transition: \"all 2.5s ease\",\n      content: \"\",\n      padding: \"10%\",\n      fontSize: \"3rem\",\n      fontWeight: \"bold\",\n      color: `${skillData[index].textColor}`,\n      backgroundColor: `${skillData[index].color}`,\n      transform: triggerPoint[index] ? `translate(${10 - index * 10}%, -1000%)` : `translate(${10 - index * 10}%, ${-45 + index * 10}%)`\n    },\n    id: `skill${index + 1}`,\n    children: skill.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skills\",\n    id: \"skills\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      id: \"imageContainer\",\n      children: skillList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Skills, \"kXZ8DdE4D7P7gZAVGj6HLdeCqf0=\");\n\n_c = Skills;\nexport default Skills;\n\nvar _c;\n\n$RefreshReg$(_c, \"Skills\");","map":{"version":3,"sources":["D:/Work/cv-react/src/page/About/Skills.tsx"],"names":["useEffect","useState","DummyData","skillData","renderOrder","reverse","Skills","initialScrollPoints","Array","length","fill","scrollPoints","setScrollPoints","skillSection","document","getElementById","sectionTop","offsetTop","sectionHeight","clientHeight","scrollBreakPoint","scrollStartModifyer","scrollAmountModifyer","window","addEventListener","updatedScrollPoints","map","scrollPoint","index","scrollY","conditionHolder","forEach","breakPoint","push","triggerPoint","skillList","skill","display","justifyContent","alignItems","position","width","height","borderRadius","transition","content","padding","fontSize","fontWeight","color","textColor","backgroundColor","transform","name"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./Skills.scss\";\r\nimport { DummyData } from \"./DummyData\";\r\n\r\nconst skillData = DummyData;\r\nconst renderOrder = skillData.reverse();\r\n\r\nconst Skills = () => {\r\n  const initialScrollPoints = new Array(skillData.length).fill(false);\r\n  const [scrollPoints, setScrollPoints] = useState(initialScrollPoints);\r\n\r\n  useEffect(() => {\r\n    const skillSection = document.getElementById(\"skills\");\r\n    const sectionTop = skillSection ? skillSection.offsetTop * 1.3 : null;\r\n    const sectionHeight = skillSection ? skillSection.clientHeight : null;\r\n    const scrollBreakPoint = sectionHeight\r\n      ? sectionHeight / skillData.length\r\n      : null;\r\n    const scrollStartModifyer = 0.6 * sectionTop!;\r\n    const scrollAmountModifyer = 0.8 * scrollBreakPoint!;\r\n\r\n    window.addEventListener(\"scroll\", () => {\r\n      const updatedScrollPoints = scrollPoints.map((scrollPoint, index) => {\r\n        if (\r\n          window.scrollY >\r\n          scrollStartModifyer + scrollAmountModifyer * (index + 1)\r\n        ) {\r\n          return !scrollPoint;\r\n        }\r\n        return scrollPoint;\r\n      });\r\n      setScrollPoints(updatedScrollPoints);\r\n    });\r\n  }, []);\r\n\r\n  const conditionHolder: string[] = [];\r\n\r\n  scrollPoints.forEach((breakPoint) => {\r\n    conditionHolder.push(breakPoint ? \"slide-out\" : \"\");\r\n  });\r\n\r\n  const triggerPoint = conditionHolder.reverse();\r\n\r\n  const skillList = renderOrder.map((skill, index) => (\r\n    <div\r\n      style={{\r\n        display:\"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        position:\"absolute\",\r\n        width: \"10em\",\r\n        height: \"10em\",\r\n        borderRadius: \"15%\",\r\n        transition: \"all 2.5s ease\",\r\n        content: \"\",\r\n        padding: \"10%\",\r\n        fontSize: \"3rem\",\r\n        fontWeight: \"bold\",\r\n        color: `${skillData[index].textColor}`,\r\n        backgroundColor:`${skillData[index].color}`,\r\n        transform: triggerPoint[index] ? `translate(${10-index*10}%, -1000%)` : `translate(${10-index*10}%, ${-45+index*10}%)`\r\n      }}\r\n      id={`skill${index + 1}`}\r\n    >\r\n      {skill.name}\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"skills\" id=\"skills\">\r\n      <div className=\"image-container\" id=\"imageContainer\">\r\n        {skillList}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n"]},"metadata":{},"sourceType":"module"}
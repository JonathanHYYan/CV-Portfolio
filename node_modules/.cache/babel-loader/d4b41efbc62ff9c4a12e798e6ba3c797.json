{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\cv-react\\\\src\\\\page\\\\About\\\\Skills.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./Skills.scss\";\nimport { DummyData } from \"./DummyData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst skillData = DummyData;\n\nconst Skills = () => {\n  _s();\n\n  const initialScrollPoints = new Array(skillData.length).fill(false);\n  const [scrollPoints, setScrollPoints] = useState(initialScrollPoints);\n  console.log(scrollPoints);\n  useEffect(() => {\n    const skillSection = document.getElementById(\"skills\");\n    const sectionTop = skillSection ? skillSection.offsetTop : null;\n    const sectionHeight = skillSection ? skillSection.clientHeight : null;\n    const scrollBreakPoint = sectionHeight ? sectionHeight / skillData.length : null;\n    const scrollStartModifyer = 0.6 * sectionTop;\n    const scrollAmountModifyer = 0.8 * scrollBreakPoint;\n    window.addEventListener(\"scroll\", () => {\n      scrollPoints.forEach((scrollPoint, index) => {\n        if (window.scrollY > scrollStartModifyer + scrollAmountModifyer * (index + 1)) {\n          const updatedScrollPoits = [...scrollPoints];\n          updatedScrollPoits[index] = !scrollPoint;\n          setScrollPoints(updatedScrollPoits);\n        }\n      }); // if (\n      //   window.scrollY >\n      //   scrollStartModifyer + scrollAmountModifyer * DummyData[1].num\n      // ) {\n      //   dispatchBreakPoint({ type: \"update\", payloads });\n      // }\n    });\n  }, []);\n  const scrollCondition = [];\n  const scrollCondition1 = scrollState.scroll1 ? \"slide-out\" : \"\";\n  const scrollCondition2 = scrollState.scroll2 ? \"slide-out\" : \"\";\n  const scrollCondition3 = scrollState.scroll3 ? \"slide-out\" : \"\";\n  const scrollCondition4 = scrollState.scroll4 ? \"slide-out\" : \"\";\n  const scrollCondition5 = scrollState.scroll5 ? \"slide-out\" : \"\";\n  const scrollCondition6 = scrollState.scroll6 ? \"slide-out\" : \"\";\n  const conditionHolder = [scrollCondition1, scrollCondition2, scrollCondition3, scrollCondition4, scrollCondition5, scrollCondition6];\n  const skillList = skillData.map((skill, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `skill-card skill-card-${skill.num} ` + conditionHolder[index],\n    id: `skill${skill.num}`,\n    children: skill.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skills\",\n    id: \"skills\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      id: \"imageContainer\",\n      children: skillList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Skills, \"kXZ8DdE4D7P7gZAVGj6HLdeCqf0=\");\n\n_c = Skills;\nexport default Skills;\n\nvar _c;\n\n$RefreshReg$(_c, \"Skills\");","map":{"version":3,"sources":["D:/Work/cv-react/src/page/About/Skills.tsx"],"names":["useEffect","useState","DummyData","skillData","Skills","initialScrollPoints","Array","length","fill","scrollPoints","setScrollPoints","console","log","skillSection","document","getElementById","sectionTop","offsetTop","sectionHeight","clientHeight","scrollBreakPoint","scrollStartModifyer","scrollAmountModifyer","window","addEventListener","forEach","scrollPoint","index","scrollY","updatedScrollPoits","scrollCondition","scrollCondition1","scrollState","scroll1","scrollCondition2","scroll2","scrollCondition3","scroll3","scrollCondition4","scroll4","scrollCondition5","scroll5","scrollCondition6","scroll6","conditionHolder","skillList","map","skill","num","name"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./Skills.scss\";\r\nimport { DummyData } from \"./DummyData\";\r\n\r\nconst skillData = DummyData;\r\n\r\nconst Skills = () => {\r\n  const initialScrollPoints = new Array(skillData.length).fill(false);\r\n  const [scrollPoints, setScrollPoints] = useState(initialScrollPoints)\r\n\r\n  console.log(scrollPoints)\r\n\r\n  useEffect(() => {\r\n    const skillSection = document.getElementById(\"skills\");\r\n    const sectionTop = skillSection ? skillSection.offsetTop : null;\r\n    const sectionHeight = skillSection ? skillSection.clientHeight : null;\r\n    const scrollBreakPoint = sectionHeight ? sectionHeight / skillData.length : null;\r\n    const scrollStartModifyer = 0.6 * sectionTop!;\r\n    const scrollAmountModifyer = 0.8 * scrollBreakPoint!;\r\n\r\n    window.addEventListener(\"scroll\", () => {\r\n      scrollPoints.forEach((scrollPoint, index) => {\r\n        if(window.scrollY > scrollStartModifyer + scrollAmountModifyer * (index+1)) {\r\n          const updatedScrollPoits = [...scrollPoints];\r\n          updatedScrollPoits[index] = !scrollPoint;\r\n          setScrollPoints(updatedScrollPoits)\r\n        }\r\n      })\r\n      // if (\r\n      //   window.scrollY >\r\n      //   scrollStartModifyer + scrollAmountModifyer * DummyData[1].num\r\n      // ) {\r\n      //   dispatchBreakPoint({ type: \"update\", payloads });\r\n      // }\r\n    });\r\n  }, []);\r\n  \r\n  const scrollCondition = []\r\n\r\n  const scrollCondition1 = scrollState.scroll1 ? \"slide-out\" : \"\";\r\n  const scrollCondition2 = scrollState.scroll2 ? \"slide-out\" : \"\";\r\n  const scrollCondition3 = scrollState.scroll3 ? \"slide-out\" : \"\";\r\n  const scrollCondition4 = scrollState.scroll4 ? \"slide-out\" : \"\";\r\n  const scrollCondition5 = scrollState.scroll5 ? \"slide-out\" : \"\";\r\n  const scrollCondition6 = scrollState.scroll6 ? \"slide-out\" : \"\";\r\n\r\n  const conditionHolder = [\r\n    scrollCondition1,\r\n    scrollCondition2,\r\n    scrollCondition3,\r\n    scrollCondition4,\r\n    scrollCondition5,\r\n    scrollCondition6,\r\n  ];\r\n\r\n  const skillList = skillData.map((skill, index) => (\r\n    <div\r\n      className={`skill-card skill-card-${skill.num} ` + conditionHolder[index]}\r\n      id={`skill${skill.num}`}\r\n    >\r\n      {skill.name}\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"skills\" id=\"skills\">\r\n      <div className=\"image-container\" id=\"imageContainer\">\r\n        {skillList}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n"]},"metadata":{},"sourceType":"module"}
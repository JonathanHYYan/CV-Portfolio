{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\cv-react\\\\src\\\\components\\\\Form\\\\Form.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardTitle } from \"../UI/Card\";\nimport { useState } from \"react\";\nimport FormInput from \"./FormInput\";\nimport FormMessage from \"./FormMessage\";\nimport { ContactForm, Button, FormControls, FormError } from \"./FormStyles\";\nimport { useContext } from \"react\";\nimport ScrollContext from \"../../store/context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formState = {\n  name: \"\",\n  email: \"\",\n  message: \"\"\n};\nconst touchState = {\n  name: false,\n  email: false,\n  message: false\n};\n\nconst Form = () => {\n  _s();\n\n  const scrollCtx = useContext(ScrollContext);\n  const scroll = scrollCtx.scroll;\n  const [formData, setFormData] = useState(formState);\n  const [isValid, setIsValid] = useState(false);\n  const [used, setUsed] = useState(touchState);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const nameChangeHandler = event => {\n    setFormData(prevState => ({ ...prevState,\n      name: event.target.value\n    }));\n  };\n\n  const emailChangeHandler = event => {\n    setFormData(prevState => ({ ...prevState,\n      email: event.target.value\n    }));\n  };\n\n  const messageChangeHandler = event => {\n    setFormData(prevState => ({ ...prevState,\n      message: event.target.value\n    }));\n  };\n\n  const submitHandler = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    setUsed(prevState => ({ ...prevState,\n      name: true,\n      email: true,\n      message: true\n    }));\n\n    if (formData.name.trim() === \"\" || formData.email.trim() === \"\" || formData.message.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n    const response = await fetch(\"http://localhost:3001/send\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    });\n    console.log(response);\n\n    if (response.status === 200) {\n      console.log(\"Message Sent\");\n      setFormSubmitted(true);\n    } else {\n      console.log(\"Message failed to send\");\n    }\n  };\n\n  const nameBlurHandler = event => {\n    setUsed(usedState => ({ ...usedState,\n      name: true\n    }));\n\n    if (formData.name.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n  };\n\n  const emailBlurHandler = event => {\n    setUsed(prevState => ({ ...prevState,\n      email: true\n    }));\n\n    if (formData.email.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n  };\n\n  const messageBlurHandler = event => {\n    setUsed(prevState => ({ ...prevState,\n      message: true\n    }));\n\n    if (formData.message.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n  };\n\n  const nameCheck = !isValid && used.name;\n  const emailCheck = !isValid && used.email;\n  const messageCheck = !isValid && used.message;\n  const inputInvalid = used.name && used.email && used.message && !isValid;\n\n  const submitButton = /*#__PURE__*/_jsxDEV(Button, {\n    type: \"submit\",\n    children: \"Send\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 24\n  }, this);\n\n  const loadButton = /*#__PURE__*/_jsxDEV(Button, {\n    disabled: true,\n    type: \"submit\",\n    children: \"Sending...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n\n  const formComponent = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n      children: \"Contact Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"name\",\n        errorClass: nameCheck,\n        labelName: \"Name\",\n        min: 1,\n        inputValue: formData.name,\n        inputChange: nameChangeHandler,\n        onBlur: nameBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"email\",\n        errorClass: emailCheck,\n        labelName: \"Email\",\n        min: 1,\n        inputValue: formData.email,\n        inputChange: emailChangeHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormMessage, {\n        id: \"message\",\n        errorClass: messageCheck,\n        labelName: \"Message\",\n        rows: 5,\n        messageValue: formData.message,\n        messageChange: messageChangeHandler,\n        onBlur: messageBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), inputInvalid && /*#__PURE__*/_jsxDEV(FormError, {\n        children: \"Please fill in all sections\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(FormControls, {\n        children: isLoading ? loadButton : submitButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const submitConfirmation = /*#__PURE__*/_jsxDEV(CardTitle, {\n    children: \"Message Sent!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 30\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: scroll && /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"contact-form\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: !formSubmitted ? formComponent : submitConfirmation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 18\n    }, this)\n  }, void 0, false);\n};\n\n_s(Form, \"z8lQt/2/l4DKAuksCVllxAyrLlU=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/Work/cv-react/src/components/Form/Form.tsx"],"names":["Card","CardTitle","useState","FormInput","FormMessage","ContactForm","Button","FormControls","FormError","useContext","ScrollContext","formState","name","email","message","touchState","Form","scrollCtx","scroll","formData","setFormData","isValid","setIsValid","used","setUsed","isLoading","setIsLoading","formSubmitted","setFormSubmitted","nameChangeHandler","event","prevState","target","value","emailChangeHandler","messageChangeHandler","submitHandler","preventDefault","trim","response","fetch","method","headers","body","JSON","stringify","console","log","status","nameBlurHandler","usedState","emailBlurHandler","messageBlurHandler","nameCheck","emailCheck","messageCheck","inputInvalid","submitButton","loadButton","formComponent","submitConfirmation"],"mappings":"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","sourcesContent":["import { Card, CardTitle } from \"../UI/Card\";\r\nimport { useState } from \"react\";\r\nimport FormInput from \"./FormInput\";\r\nimport FormMessage from \"./FormMessage\";\r\nimport { ContactForm, Button, FormControls, FormError } from \"./FormStyles\";\r\nimport { useContext } from \"react\";\r\nimport ScrollContext from \"../../store/context\";\r\n\r\nconst formState: { name: string; email: string; message: string } = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nconst touchState: { name: boolean; email: boolean; message: boolean } = {\r\n  name: false,\r\n  email: false,\r\n  message: false,\r\n};\r\n\r\nconst Form = () => {\r\n  const scrollCtx = useContext(ScrollContext);\r\n  const scroll = scrollCtx.scroll;\r\n  const [formData, setFormData] = useState(formState);\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [used, setUsed] = useState(touchState);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [formSubmitted, setFormSubmitted] = useState(false);\r\n\r\n  const nameChangeHandler = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setFormData((prevState) => ({ ...prevState, name: event.target.value }));\r\n  };\r\n\r\n  const emailChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData((prevState) => ({ ...prevState, email: event.target.value }));\r\n  };\r\n\r\n  const messageChangeHandler = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    setFormData((prevState) => ({ ...prevState, message: event.target.value }));\r\n  };\r\n\r\n  const submitHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    setUsed((prevState) => ({\r\n      ...prevState,\r\n      name: true,\r\n      email: true,\r\n      message: true,\r\n    }));\r\n\r\n    if (\r\n      formData.name.trim() === \"\" ||\r\n      formData.email.trim() === \"\" ||\r\n      formData.message.trim() === \"\"\r\n    ) {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n\r\n    setIsValid(true);\r\n\r\n    const response = await fetch(\"http://localhost:3001/send\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(formData),\r\n    })\r\n\r\n    console.log(response);\r\n\r\n    if(response.status === 200) {\r\n      console.log(\"Message Sent\");\r\n      setFormSubmitted(true);\r\n    } else {\r\n      console.log(\"Message failed to send\")\r\n    }\r\n  };\r\n\r\n  const nameBlurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUsed((usedState) => ({ ...usedState, name: true }));\r\n\r\n    if (formData.name.trim() === \"\") {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n    setIsValid(true);\r\n  };\r\n\r\n  const emailBlurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUsed((prevState) => ({ ...prevState, email: true }));\r\n\r\n    if (formData.email.trim() === \"\") {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n    setIsValid(true);\r\n  };\r\n\r\n  const messageBlurHandler = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    setUsed((prevState) => ({ ...prevState, message: true }));\r\n\r\n    if (formData.message.trim() === \"\") {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n    setIsValid(true);\r\n  };\r\n\r\n  const nameCheck = !isValid && used.name;\r\n  const emailCheck = !isValid && used.email;\r\n  const messageCheck = !isValid && used.message;\r\n\r\n  const inputInvalid = used.name && used.email && used.message && !isValid;\r\n\r\n  const submitButton = <Button type=\"submit\">Send</Button>;\r\n\r\n  const loadButton = (\r\n    <Button disabled type=\"submit\">\r\n      Sending...\r\n    </Button>\r\n  );\r\n\r\n  const formComponent = (\r\n    <>\r\n      <CardTitle>Contact Form</CardTitle>\r\n      <ContactForm onSubmit={submitHandler}>\r\n        <FormInput\r\n          id=\"name\"\r\n          errorClass={nameCheck}\r\n          labelName=\"Name\"\r\n          min={1}\r\n          inputValue={formData.name}\r\n          inputChange={nameChangeHandler}\r\n          onBlur={nameBlurHandler}\r\n        />\r\n        <FormInput\r\n          id=\"email\"\r\n          errorClass={emailCheck}\r\n          labelName=\"Email\"\r\n          min={1}\r\n          inputValue={formData.email}\r\n          inputChange={emailChangeHandler}\r\n          onBlur={emailBlurHandler}\r\n        />\r\n        <FormMessage\r\n          id=\"message\"\r\n          errorClass={messageCheck}\r\n          labelName=\"Message\"\r\n          rows={5}\r\n          messageValue={formData.message}\r\n          messageChange={messageChangeHandler}\r\n          onBlur={messageBlurHandler}\r\n        />\r\n        {inputInvalid && <FormError>Please fill in all sections</FormError>}\r\n        <FormControls>{isLoading ? loadButton : submitButton}</FormControls>\r\n      </ContactForm>\r\n    </>\r\n  );\r\n\r\n  const submitConfirmation = <CardTitle>Message Sent!</CardTitle>;\r\n\r\n  return (\r\n    <>\r\n      {scroll && <section id=\"contact-form\">\r\n        <Card>{!formSubmitted ? formComponent : submitConfirmation}</Card>\r\n      </section>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}
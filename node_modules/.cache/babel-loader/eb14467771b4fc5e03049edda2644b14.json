{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\cv-react\\\\src\\\\components\\\\Form\\\\Form.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardTitle } from \"../UI/Card\";\nimport { useState } from \"react\";\nimport FormInput from \"./FormInput\";\nimport FormMessage from \"./FormMessage\";\nimport { ContactForm, Button, FormControls, FormError } from \"./FormStyles\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formState = {\n  name: \"\",\n  email: \"\",\n  message: \"\"\n};\nconst touchState = {\n  name: false,\n  email: false,\n  message: false\n};\n\nconst Form = () => {\n  _s();\n\n  const [formData, setFormData] = useState(formState);\n  const [isValid, setIsValid] = useState(false);\n  const [used, setUsed] = useState(touchState);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const nameChangeHandler = event => {\n    setFormData(prevState => ({ ...prevState,\n      name: event.target.value\n    }));\n  };\n\n  const emailChangeHandler = event => {\n    setFormData(prevState => ({ ...prevState,\n      email: event.target.value\n    }));\n  };\n\n  const messageChangeHandler = event => {\n    setFormData(prevState => ({ ...prevState,\n      message: event.target.value\n    }));\n  };\n\n  useEffect(() => {// if (isValid) {\n    //   console.log(formData);\n    // }\n  });\n  const emailRegexValidation = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n\n  const submitHandler = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    setUsed(prevState => ({ ...prevState,\n      name: true,\n      email: true,\n      message: true\n    }));\n\n    if (formData.name.trim() === \"\" || formData.email.trim() === \"\" || formData.message.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n    const response = await fetch(\"http://localhost:3001/send\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    });\n    console.log(response); // .then((res) => {\n    //   console.log(res);\n    //   setIsLoading(false);\n    //   res.json();\n    // })\n    // .then(async (res) => {\n    //   const resData: ResponseData | any = await res;\n    //   console.log(resData);\n    //   console.log(res);\n    //   if (resData.status === \"success\") {\n    //     alert(\"Message Sent\");\n    //   } else if (resData.status === \"fail\") {\n    //     alert(\"Message failed to send\");\n    //   }\n    // })\n    // .then(() => {\n    //   setFormSubmitted(true);\n    // });\n  };\n\n  const nameBlurHandler = event => {\n    setUsed(usedState => ({ ...usedState,\n      name: true\n    }));\n\n    if (formData.name.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n  };\n\n  const emailBlurHandler = event => {\n    setUsed(prevState => ({ ...prevState,\n      email: true\n    }));\n\n    if (formData.email.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n  };\n\n  const messageBlurHandler = event => {\n    setUsed(prevState => ({ ...prevState,\n      message: true\n    }));\n\n    if (formData.message.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n  };\n\n  const nameCheck = !isValid && used.name;\n  const emailCheck = !isValid && used.email;\n  const messageCheck = !isValid && used.message;\n  const inputInvalid = used.name && used.email && used.message && !isValid;\n\n  const submitButton = /*#__PURE__*/_jsxDEV(Button, {\n    type: \"submit\",\n    children: \"Send\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 24\n  }, this);\n\n  const loadButton = /*#__PURE__*/_jsxDEV(Button, {\n    disabled: true,\n    type: \"submit\",\n    children: \"Sending...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n\n  const formComponent = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n      children: \"Contact Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"name\",\n        errorClass: nameCheck,\n        labelName: \"Name\",\n        min: 1,\n        inputValue: formData.name,\n        inputChange: nameChangeHandler,\n        onBlur: nameBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"email\",\n        errorClass: emailCheck,\n        labelName: \"Email\",\n        min: 1,\n        inputValue: formData.email,\n        inputChange: emailChangeHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormMessage, {\n        id: \"message\",\n        errorClass: messageCheck,\n        labelName: \"Message\",\n        rows: 5,\n        messageValue: formData.message,\n        messageChange: messageChangeHandler,\n        onBlur: messageBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), inputInvalid && /*#__PURE__*/_jsxDEV(FormError, {\n        children: \"Please fill in all sections\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(FormControls, {\n        children: isLoading ? loadButton : submitButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const submitConfirmation = /*#__PURE__*/_jsxDEV(CardTitle, {\n    children: \"Message Sent!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 30\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"contact-form\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: !formSubmitted ? formComponent : submitConfirmation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Form, \"yyRIEds0J+wqBLkYaey1heSvKe0=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/Work/cv-react/src/components/Form/Form.tsx"],"names":["Card","CardTitle","useState","FormInput","FormMessage","ContactForm","Button","FormControls","FormError","useEffect","formState","name","email","message","touchState","Form","formData","setFormData","isValid","setIsValid","used","setUsed","isLoading","setIsLoading","formSubmitted","setFormSubmitted","nameChangeHandler","event","prevState","target","value","emailChangeHandler","messageChangeHandler","emailRegexValidation","submitHandler","preventDefault","trim","response","fetch","method","headers","body","JSON","stringify","console","log","nameBlurHandler","usedState","emailBlurHandler","messageBlurHandler","nameCheck","emailCheck","messageCheck","inputInvalid","submitButton","loadButton","formComponent","submitConfirmation"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,SAAf,QAAgC,YAAhC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,YAA9B,EAA4CC,SAA5C,QAA6D,cAA7D;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,SAA2D,GAAG;AAClEC,EAAAA,IAAI,EAAE,EAD4D;AAElEC,EAAAA,KAAK,EAAE,EAF2D;AAGlEC,EAAAA,OAAO,EAAE;AAHyD,CAApE;AAMA,MAAMC,UAA+D,GAAG;AACtEH,EAAAA,IAAI,EAAE,KADgE;AAEtEC,EAAAA,KAAK,EAAE,KAF+D;AAGtEC,EAAAA,OAAO,EAAE;AAH6D,CAAxE;;AAQA,MAAME,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAACQ,SAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACY,UAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACsB,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,CAAC,KAAD,CAAlD;;AAEA,QAAMwB,iBAAiB,GACrBC,KADwB,IAEf;AACTV,IAAAA,WAAW,CAAEW,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBjB,MAAAA,IAAI,EAAEgB,KAAK,CAACE,MAAN,CAAaC;AAAnC,KAAhB,CAAD,CAAX;AACD,GAJD;;AAMA,QAAMC,kBAAkB,GAAIJ,KAAD,IAAgD;AACzEV,IAAAA,WAAW,CAAEW,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBhB,MAAAA,KAAK,EAAEe,KAAK,CAACE,MAAN,CAAaC;AAApC,KAAhB,CAAD,CAAX;AACD,GAFD;;AAIA,QAAME,oBAAoB,GACxBL,KAD2B,IAExB;AACHV,IAAAA,WAAW,CAAEW,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBf,MAAAA,OAAO,EAAEc,KAAK,CAACE,MAAN,CAAaC;AAAtC,KAAhB,CAAD,CAAX;AACD,GAJD;;AAMArB,EAAAA,SAAS,CAAC,MAAM,CACd;AACA;AACA;AACD,GAJQ,CAAT;AAMA,QAAMwB,oBAAoB,GACxB,4aADF;;AAGA,QAAMC,aAAa,GAAG,MAAOP,KAAP,IAAsB;AAC1CA,IAAAA,KAAK,CAACQ,cAAN;AACAZ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,OAAO,CAAEO,SAAD,KAAgB,EACtB,GAAGA,SADmB;AAEtBjB,MAAAA,IAAI,EAAE,IAFgB;AAGtBC,MAAAA,KAAK,EAAE,IAHe;AAItBC,MAAAA,OAAO,EAAE;AAJa,KAAhB,CAAD,CAAP;;AAOA,QACEG,QAAQ,CAACL,IAAT,CAAcyB,IAAd,OAAyB,EAAzB,IACApB,QAAQ,CAACJ,KAAT,CAAewB,IAAf,OAA0B,EAD1B,IAEApB,QAAQ,CAACH,OAAT,CAAiBuB,IAAjB,OAA4B,EAH9B,EAIE;AACAjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AAEDA,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,UAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAAD,EAA+B;AACzDC,MAAAA,MAAM,EAAE,MADiD;AAEzDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFgD;AAGzDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe3B,QAAf;AAHmD,KAA/B,CAA5B;AAMA4B,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ,EA3B0C,CA4BxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GA9CD;;AAgDA,QAAMS,eAAe,GAAInB,KAAD,IAAgD;AACtEN,IAAAA,OAAO,CAAE0B,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBpC,MAAAA,IAAI,EAAE;AAAtB,KAAhB,CAAD,CAAP;;AAEA,QAAIK,QAAQ,CAACL,IAAT,CAAcyB,IAAd,OAAyB,EAA7B,EAAiC;AAC/BjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AACDA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GARD;;AAUA,QAAM6B,gBAAgB,GAAIrB,KAAD,IAAgD;AACvEN,IAAAA,OAAO,CAAEO,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBhB,MAAAA,KAAK,EAAE;AAAvB,KAAhB,CAAD,CAAP;;AAEA,QAAII,QAAQ,CAACJ,KAAT,CAAewB,IAAf,OAA0B,EAA9B,EAAkC;AAChCjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AACDA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GARD;;AAUA,QAAM8B,kBAAkB,GACtBtB,KADyB,IAEtB;AACHN,IAAAA,OAAO,CAAEO,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBf,MAAAA,OAAO,EAAE;AAAzB,KAAhB,CAAD,CAAP;;AAEA,QAAIG,QAAQ,CAACH,OAAT,CAAiBuB,IAAjB,OAA4B,EAAhC,EAAoC;AAClCjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AACDA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAVD;;AAYA,QAAM+B,SAAS,GAAG,CAAChC,OAAD,IAAYE,IAAI,CAACT,IAAnC;AACA,QAAMwC,UAAU,GAAG,CAACjC,OAAD,IAAYE,IAAI,CAACR,KAApC;AACA,QAAMwC,YAAY,GAAG,CAAClC,OAAD,IAAYE,IAAI,CAACP,OAAtC;AAEA,QAAMwC,YAAY,GAAGjC,IAAI,CAACT,IAAL,IAAaS,IAAI,CAACR,KAAlB,IAA2BQ,IAAI,CAACP,OAAhC,IAA2C,CAACK,OAAjE;;AAEA,QAAMoC,YAAY,gBAAG,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAArB;;AAEA,QAAMC,UAAU,gBACd,QAAC,MAAD;AAAQ,IAAA,QAAQ,MAAhB;AAAiB,IAAA,IAAI,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,QAAMC,aAAa,gBACjB;AAAA,4BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEtB,aAAvB;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,UAAU,EAAEgB,SAFd;AAGE,QAAA,SAAS,EAAC,MAHZ;AAIE,QAAA,GAAG,EAAE,CAJP;AAKE,QAAA,UAAU,EAAElC,QAAQ,CAACL,IALvB;AAME,QAAA,WAAW,EAAEe,iBANf;AAOE,QAAA,MAAM,EAAEoB;AAPV;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,UAAU,EAAEK,UAFd;AAGE,QAAA,SAAS,EAAC,OAHZ;AAIE,QAAA,GAAG,EAAE,CAJP;AAKE,QAAA,UAAU,EAAEnC,QAAQ,CAACJ,KALvB;AAME,QAAA,WAAW,EAAEmB,kBANf;AAOE,QAAA,MAAM,EAAEiB;AAPV;AAAA;AAAA;AAAA;AAAA,cAVF,eAmBE,QAAC,WAAD;AACE,QAAA,EAAE,EAAC,SADL;AAEE,QAAA,UAAU,EAAEI,YAFd;AAGE,QAAA,SAAS,EAAC,SAHZ;AAIE,QAAA,IAAI,EAAE,CAJR;AAKE,QAAA,YAAY,EAAEpC,QAAQ,CAACH,OALzB;AAME,QAAA,aAAa,EAAEmB,oBANjB;AAOE,QAAA,MAAM,EAAEiB;AAPV;AAAA;AAAA;AAAA;AAAA,cAnBF,EA4BGI,YAAY,iBAAI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BnB,eA6BE,QAAC,YAAD;AAAA,kBAAe/B,SAAS,GAAGiC,UAAH,GAAgBD;AAAxC;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;;AAqCA,QAAMG,kBAAkB,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA3B;;AAEA,sBACE;AAAA,2BACE;AAAS,MAAA,EAAE,EAAC,cAAZ;AAAA,6BACE,QAAC,IAAD;AAAA,kBAAO,CAACjC,aAAD,GAAiBgC,aAAjB,GAAiCC;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,CA5KD;;GAAM1C,I;;KAAAA,I;AA8KN,eAAeA,IAAf","sourcesContent":["import { Card, CardTitle } from \"../UI/Card\";\r\nimport { useState } from \"react\";\r\nimport FormInput from \"./FormInput\";\r\nimport FormMessage from \"./FormMessage\";\r\nimport { ContactForm, Button, FormControls, FormError } from \"./FormStyles\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst formState: { name: string; email: string; message: string } = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nconst touchState: { name: boolean; email: boolean; message: boolean } = {\r\n  name: false,\r\n  email: false,\r\n  message: false,\r\n};\r\n\r\ntype ResponseData = {status:string}\r\n\r\nconst Form = () => {\r\n  const [formData, setFormData] = useState(formState);\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [used, setUsed] = useState(touchState);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [formSubmitted, setFormSubmitted] = useState(false);\r\n\r\n  const nameChangeHandler = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setFormData((prevState) => ({ ...prevState, name: event.target.value }));\r\n  };\r\n\r\n  const emailChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData((prevState) => ({ ...prevState, email: event.target.value }));\r\n  };\r\n\r\n  const messageChangeHandler = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    setFormData((prevState) => ({ ...prevState, message: event.target.value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if (isValid) {\r\n    //   console.log(formData);\r\n    // }\r\n  });\r\n\r\n  const emailRegexValidation =\r\n    /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n\r\n  const submitHandler = async (event: any) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    setUsed((prevState) => ({\r\n      ...prevState,\r\n      name: true,\r\n      email: true,\r\n      message: true,\r\n    }));\r\n\r\n    if (\r\n      formData.name.trim() === \"\" ||\r\n      formData.email.trim() === \"\" ||\r\n      formData.message.trim() === \"\"\r\n    ) {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n\r\n    setIsValid(true);\r\n\r\n    const response = await fetch(\"http://localhost:3001/send\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(formData),\r\n    })\r\n\r\n    console.log(response)\r\n      // .then((res) => {\r\n      //   console.log(res);\r\n      //   setIsLoading(false);\r\n      //   res.json();\r\n      // })\r\n      // .then(async (res) => {\r\n      //   const resData: ResponseData | any = await res;\r\n      //   console.log(resData);\r\n      //   console.log(res);\r\n      //   if (resData.status === \"success\") {\r\n      //     alert(\"Message Sent\");\r\n      //   } else if (resData.status === \"fail\") {\r\n      //     alert(\"Message failed to send\");\r\n      //   }\r\n      // })\r\n      // .then(() => {\r\n      //   setFormSubmitted(true);\r\n      // });\r\n  };\r\n\r\n  const nameBlurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUsed((usedState) => ({ ...usedState, name: true }));\r\n\r\n    if (formData.name.trim() === \"\") {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n    setIsValid(true);\r\n  };\r\n\r\n  const emailBlurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUsed((prevState) => ({ ...prevState, email: true }));\r\n\r\n    if (formData.email.trim() === \"\") {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n    setIsValid(true);\r\n  };\r\n\r\n  const messageBlurHandler = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    setUsed((prevState) => ({ ...prevState, message: true }));\r\n\r\n    if (formData.message.trim() === \"\") {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n    setIsValid(true);\r\n  };\r\n\r\n  const nameCheck = !isValid && used.name;\r\n  const emailCheck = !isValid && used.email;\r\n  const messageCheck = !isValid && used.message;\r\n\r\n  const inputInvalid = used.name && used.email && used.message && !isValid;\r\n\r\n  const submitButton = <Button type=\"submit\">Send</Button>;\r\n\r\n  const loadButton = (\r\n    <Button disabled type=\"submit\">\r\n      Sending...\r\n    </Button>\r\n  );\r\n\r\n  const formComponent = (\r\n    <>\r\n      <CardTitle>Contact Form</CardTitle>\r\n      <ContactForm onSubmit={submitHandler}>\r\n        <FormInput\r\n          id=\"name\"\r\n          errorClass={nameCheck}\r\n          labelName=\"Name\"\r\n          min={1}\r\n          inputValue={formData.name}\r\n          inputChange={nameChangeHandler}\r\n          onBlur={nameBlurHandler}\r\n        />\r\n        <FormInput\r\n          id=\"email\"\r\n          errorClass={emailCheck}\r\n          labelName=\"Email\"\r\n          min={1}\r\n          inputValue={formData.email}\r\n          inputChange={emailChangeHandler}\r\n          onBlur={emailBlurHandler}\r\n        />\r\n        <FormMessage\r\n          id=\"message\"\r\n          errorClass={messageCheck}\r\n          labelName=\"Message\"\r\n          rows={5}\r\n          messageValue={formData.message}\r\n          messageChange={messageChangeHandler}\r\n          onBlur={messageBlurHandler}\r\n        />\r\n        {inputInvalid && <FormError>Please fill in all sections</FormError>}\r\n        <FormControls>{isLoading ? loadButton : submitButton}</FormControls>\r\n      </ContactForm>\r\n    </>\r\n  );\r\n\r\n  const submitConfirmation = <CardTitle>Message Sent!</CardTitle>;\r\n\r\n  return (\r\n    <>\r\n      <section id=\"contact-form\">\r\n        <Card>{!formSubmitted ? formComponent : submitConfirmation}</Card>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}